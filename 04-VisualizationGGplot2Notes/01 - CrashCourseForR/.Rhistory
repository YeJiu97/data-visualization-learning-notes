getwd()
# 一个变量
a <- "abcde"
a
# 移除
remove(a)
b <- "bcde"
ls()
# 移除
rm(b)
?read.csv()
# 打印
print("Hello R Programming")
cat("Hello ", a, "programming.", "Hello, " b, "Programming")
cat("Hello ", a, "programming.", "Hello, " b, "Programming")
# cat()打印
a <- "R"
b <- "World"
cat("Hello ", a, "programming.", "Hello, " b, "Programming")
cat("Hello ", a, "programming.", " Hello, " b, "Programming")
cat("Hello ", a, "programming.", " Hello, " b, "Programming")
cat("Hello ", a, "programming.")
# cat()打印
a <- "R"
cat("Hello ", a, "programming.")
# 加载ggplot2
library(ggplot2)
# 内置数据集
mpg
# types
num = 123456
typeof(num)
num = 123456
typeof(num)
chr = "abcde"
typeof(chr)
num_2 = 123.0
typeof(num_2)
class(num_2)
int_num <- 1L
typeof(int_num)
complex_num <- 1 + 1
typeof(complex_num)
complex_num <- 0 + 1i
typeof(complex_num)
bool_value = TRUE
typeof(bool_value)
# vectors
v1 <- c(1, 2, 3, 4, 5)
typeof(v1)
class(v1)
v2 <- c("a", "b", "c", "d")
typeof(v2)
class(v2)
# 指令生成
num_vector <- vector("numeric", length = 5)
num_vector
num_vector + 10
num_vector
is.vector(num_vector)
# 使用 : 来进行切割
vector_char <- c(1, 2, 3, 4, 5, 6, 7, 8)
vector_char
vector_char[2, 4]
vector_char[2:4]
# 使用 : 来进行生成
vector_num <- c(1:10)
vector_num
vector_num[-1]
# 使用 -n 来排除位于 n 位置的元素
vector_num[-2]
# 使用c()来去除多个位置的元素
vector_num[c(-1, -3, -5)]
# 使用c()来获得特定位置的元素
vector_num[c(1, 4, 6, 9, 2)]
# 修改值
vector_char <- c("A", "B", "C")
vector_char
vector_char[1] <- "Modify"
vector_char
vector_char
# 条件新元素
vector_char <- c("D")
vector_char
# 修改值
vector_char <- c("A", "B", "C")
vector_char
vector_char[1] <- "Modify"
vector_char
# 条件新元素
vector_char <- c(vector_char, "D")
vector_char
# mixing classes
vector_mix <- c(TRUE, "Hello")
vector_mix
vector_mix_2 <- c(1, FALSE)
vector_mix_2
class(vector_mix)
class(vector_mix_2)
vector_1 <- c(1, 2, 3, 4, 5)
vector_2 <- c("1", "2", "3", "4", "5")
vector_1 == vector_2
typeof(vector_1)
typeof(vector_2)
vector_1 == vector_2
class(vector_2)
vector_1 <- c(1, 2, 3, 4, 5)
typeof(vector_1)
class(vector_1)
vector_2 <- c("1", "2", "3", "4", "5")
typeof(vector_2)
class(vector_2)
vector_1 == vector_2
length(vector_1)
dim(vector_1)
vector_1 <- c(1, 2, 3, 4, 5)
vector_2 <- c(6, 7, 8, 9, 10)
vector_com <- c(vector_1, vector_2)
vector_com
# R list
l <- list()
class(l)
l <- list("Johm", 72, TRUE)
l
v <- c(1, 2, 3)
l <- list(l, v)
l
l[1, 1]
l[c(1, 2), 1]
l[[1][2]]
l[[1]][[2]]]
l[[1]][[2]]
names(l) <- c("Name", "Age", "Retired", "Numbers", "Parents")
length(l)
x <- matrix[1:12, nrow = 4, ncol = 3]
x
x <- matrix(1:12, nrow = 4, ncol = 3)
x
x <- matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
x
y <- matrix(1:13, nrow = 4, ncol = 3)
y <- matrix(1:11, nrwo = 4, ncol = 3)
y <- matrix(1:12, nrwo = 4, ncol = 3)
y <- matrix(1:12, nrow = 4, ncol = 3)
y <- matrix(1:13, nrow = 4, ncol = 3)
y <- matrix(1:11, nrow = 4, ncol = 3)
y <- matrix(1:16, nrow = 4, ncol = 3)
y
y <- matrix(1:16, nrow = 4, ncol = 3)
y
z <- matrix(1:12, nrow = 4, ncol = 4)
z
j <- matrix("Hello", nrow= 4, ncol = 4)
j
myrows <- c("A", "B", "C", "D")
mycols <- c("col1", "col2", "col3", "col4")
matrix_1 <- matrix(1:16, nrow = 4, ncol = 4, dimnames = list(myrows, mycols))
matrix_1
colnames(matrix_1)
rownames(matrix_1)
rownames(x)[4] <- "ZZ"
rownames(matrix_1)[4] <- "ZZ"
rownames(matrix_1)
matrix_1[6]
matrix_1[2, 3]
matrix_1[1, ]
matrix_1[c(1, 3), ]
matrix_1[c(-1, -4), ]
matrix_1["A", "col3"]
matrix_1["A", ]
matrix_1
t(matrix_1)
matrix_1
cbind(matrix_1, c(17, 18, 19, 20))
rbind(matrix_1, c(111, 222, 333, 444, 555))
rbind(matrix_1, "D" = c(111, 222, 333, 444, 555))
dim(matrix_1)
dim(matrix_1) <- c(2, 8)
matrix_1
matrix_1
vec_01 <- c(1, 2, 3, 4)
typeof(vec_01)
class(vec_01)
is.vector(vec_01)
vec_02 <- c(1, 2, "Hello")
vec_02
is.vector(vec_02)
typeof(vec_02)
typeof(vec_02[1])
# array
array_01 <- array(1:18, dim = c(3, 3, 2))
array_01
array_01[, , 1]
array_01[, , 3]
array_01[1, , 1]
array_01
array_01[1, , 1]
df
df <- data.frame(x = 1:3, y = 3:1)
df
person_names <- c("Alice", "Bob", "Charlie", "David")
ages <- c(45, 35, 25, 60)
df <- data.frame(person_names, ages)
df
df <- df[-1]
df
person_names <- c("Alice", "Bob", "Charlie", "David")
ages <- c(45, 35, 25, 60)
df <- data.frame(person_names, ages)
df
df
typeof(df)
class(df)
vec_03 <- c(1, 2, 3, 4, 5, 6)
as.data.frame(vec_03)
length(df)
df
nrow(df)
ncol(df)
cars
head(cars, n = 10)
tail(cars, n = 10)
cars_df <- cars
head(cars_df)
tail(cars_df)
# 查看cars数据集的速度列
cars_df$speed
# 查看cars数据集的dist列
cars_df$dist
cars_df$speed[3]
cars_df["speed"]
# 注意区别
class(cars_df["speed"])
class(cars_df$speed)
numeric_vec <- c(1, 2, 3, 4)
class(numeric_vec)
# 条件判断选择
c[c$speed <= 7]
# 条件判断选择
cars_df[cars_df$speed <= 7]
# 条件判断选择
cars_df[cars_df$speed <= 7, ]
# 多个条件判断
cars_df[(cars_df$speed >= 7 & cars_df$dist >= 10), ]
cars_df
# 多个条件判断
cars_df[(cars_df$speed >= 7 & cars_df$dist >= 10), ]
# 多个条件判断
cars_df[(cars_df$speed <= 7 & cars_df$dist >= 10), ]
cars_df[cars_df$speed == 7, ]
# factor
x <- factor(c("AA", "BB", "CC"), levels = c("AA", "BB", "CC"))
x
gender <- c("male", "female", "female", "male", "male", "female")
gender_factor <- factor(gender)
gender_factor
is.factor(x)
# factor
x <- factor(c("AA", "BB", "CC"), levels = c("AA", "BB", "CC"))
x
is.factor(x)
class(x)
x <- factor(c("AA", "BB", "CC"), levels = c("AA", "BB", "CC", "DD"))
x
x <- factor(c("AA", "BB", "CC", "DD"), levels = c("AA", "BB", "CC", "DD"))
x
x <- factor(c("AA", "BB", "CC", "DD"), levels = c("AA", "BB", "CC"))
x
x <- factor(c("AA", "BB", "CC", "BB"), levels = c("AA", "BB", "CC"))
x
sample_df <- read.table("readSample.csv")
sample_df
is.data.frame(sample_df)
sample_df_csv <- read.csv("readSample.csv")
sample_df_csv
sample_df$V1
sample_df <- read.table("readSample.csv", header =  TRUE)
head(sample_df)
sample_df <- read.table("readSample.csv", header =  TRUE, sep = ",")
sample_df
sample_df <- read.table("readSample.csv", header =  TRUE, sep = " ")
sample_df
sample_df <- read.table("readSample.csv", header = TRUE, spe = " ", stringsAsFactors = TRUE)
sample_df <- read.table("readSample.csv", header = TRUE, stringsAsFactors = TRUE)
class(sample_df$Residence)
# 操作尝试
library(dplyr)
tf_df <- read.csv("transformSample.csv")
head(tf_df)
str(tf_df)  # 使用str()查看数据框的结构
# filter()函数
filter(tf_df, Age < 35)
tf_df[df$ages < 35, ]
tf_df[df$AGE < 35, ]
tf_df[tf_df$Age < 35, ]
filter(tf, Age < 35, Residence == "Boston")
filter(tf_df, Age < 35, Residence == "Boston")
tf_df[(tf_df$Age < 35 & tf_df$Residence == "Boston"), ]
filter(tf_df, Age < 35, Residence == "Boston" | Residence == "Middletowm")
filter(tf_df, Age < 35, Residence == "Boston" | Residence == "Middletown")
filter(tf_df, Age < 35, Residence %in% c("Boston", "Middletown"))
# select
select(tf_df, Age)
select(tf_df, Age, Residence)
select(tf_df, starts_with("Res"))
View(tf_df)
select(tf_df, ends_with("ts"))
rename_with(tf_df, toupper())
rename_with(tf_df, toupper)
tf_df
select(filter(tf_df, Active == TRUE), Age)
filter(tf_df, Active == TRUE)
filter(df, Active == TRUE) %>% select(Age)
filter(df, "Active" == TRUE) %>% select(Age)
filter(tf_df, Active == TRUE) %>% select(Age)
arrange(tf_df)
arrange(tf_df, Age)
arrange(tf_df, desc(Age))
arrange(tf_df, Home, Age)
arrange(tf_df, Residence, Age)
# missing values
air_df <- airquality
air_df
complete.cases(air_df)
typeof(complete.cases(air_df))
class(complete.cases(air_df))
air_df[complete.cases(air_df), ]
na.omit(air_df)
# sequence
1 ： 10
1:10
1:10
seq(1, 10)
seq(1, 20, by = 2)
seq(1, 20, by = 3)
seq(1, 10, by = 0.5)
seq(1, 10, length.out = 4)
seq(1, 10, length.out = 3)
seq(1, 10, length.out = 7)
seq(1, 10, along.with = 5)
seq(1, 10, along.with = V)
seq(1, 10, along.with=V)
rep(1, 10)
rep(1, 5, 3)
rep(c(2, 3, 4), 10)
rep(1:5, 2)
rep(1:5, 2)
rep(1:5, each = 3)
rep(1:5, each = 2, times = 3)
rep(1:5, length.out = 15)
# Date
date()
date()
# 如果查看类型
class(date())
d <- date()
d
d_str <- "2020-02-02"
dd <- as.Date(d_str)
dd
class(dd)
as.Date("1 July 2020", "%d %B %Y")
date_01 <- as.Date("1 July 2020", "%d %B %Y")
date_01
# merge 两个 DataFrames
x <- read.csv("transformSample.csv")
y <- read.csv("https://raw.githubusercontentcom/claragranell/data/main/transformSample.csv")
